#include "testbedGUI.h"
#include <stdlib.h>
#include <string>

#include <fstream>
#include <iostream>
#include <list>
#include <dirent.h>
#include <algorithm>
#include <numeric>
#include "objRecognition.h"
#include "utilities.hpp"
#include "sort_like_matlab.h"
#include "opencv2/video/video.hpp"
#include "ImageAcquisition.h"
#include "VisualFeatureExtraction.h"
#include "VisualFeatureEncoding.h"
#include "DataTransmission.h"
#include "VisualFeatureDecoding.h"


#include <wx/image.h>

#include <stdio.h>
#include <allegro5/allegro.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <pthread.h>


using namespace std;
using namespace cv;


// GLOBAL VARIABLES for the main app

	char radioDevice[] = "/dev/ttyUSB2";
	bool ATC_CTA = false;
	bool entropy_coding = false;
	int jpeg_qf = 75;

	int maxFeatures = 50;
	int brisk_threshold = 60;

	string detectorName = "BRISK";
	string descriptorName = "BRISK";

	// variables for computing the frame rate
	int frameCounter = 0;
	int maxFramesFPS = 3;
	double time_start = 0;
	vector<double> timeFrame;


	bool receive_whole_pic = false;

	bool app_initialized = false;
	bool stop_acq = true;

	int std_W = 640, std_H = 480;

	objRecognition   *objRec;
	bool do_bin_ratio_test = false;
	bool do_ransac = true;
	bool bin_desc = true;

	int n_objects;
	vector<int> db_class;
	vector<string> db_obj = vector<string>();

	string imgDatabasePath = "obj_database/";
	string imgQueryPath    = "obj_query/";

	VisualFeatureExtraction *featExtract;
	DataTransmission *dataTx;
	serial_source src;

	VisualFeatureDecoding decoder = VisualFeatureDecoding();


	ALLEGRO_BITMAP *disp_image = NULL;
	ALLEGRO_DISPLAY *display = NULL;
	ALLEGRO_FONT *font;
	ALLEGRO_LOCKED_REGION *reg;





void draw_image_allegro(Mat img_to_show,
                        string rec_object,
                        float fps)
{

		// draw a COLOUR image (3 channels)
		int W_ = img_to_show.cols;
		int H_ = img_to_show.rows;

		/*
		if(disp_image!=NULL){
			free(disp_image);
		}
		*/

		disp_image = al_create_bitmap(W_, H_);

		al_clear_to_color(al_map_rgb(0,0,0));


		reg = al_lock_bitmap(disp_image, al_get_bitmap_format(disp_image), ALLEGRO_LOCK_READWRITE);
		int px_sz = reg->pixel_size;


		long addr = (long)reg->data - px_sz*W_*(H_-1);
		uchar *data;
		uchar *rowPointer;
		for(int r=H_-1; r>=0; r--){
			rowPointer = img_to_show.ptr<uchar>(r);
			for(int c=0; c<W_; c++){
				data = (uchar*)addr;
				data[0] = rowPointer[3*c];
				data[1] = rowPointer[3*c+1];
				data[2] = rowPointer[3*c+2];
				addr += px_sz;
			}
		}


		al_unlock_bitmap(disp_image);
		al_draw_bitmap(disp_image,0,0,0);


		string obj = "OBJECT         : " + rec_object;
		al_draw_text(font,al_map_rgb(255,255,255), 0,500,0,obj.c_str());

		string fr;

		if (fps == -1){
			fr  = "FRAME RATE: ---";
		}
		else{
			stringstream ss (stringstream::in | stringstream::out);
			ss << (float)((int)(fps*100.0))/100.0;
			fr  = "FRAME RATE: " + ss.str() + " fps";
		}
		al_draw_text(font,al_map_rgb(255,255,255), 0,540,0,fr.c_str());


		al_flip_display();

		//free(disp_image);
		//free(reg);



}



void draw_black_screen_allegro()
{

	al_clear_to_color(al_map_rgb(0,0,0));
	al_draw_text(font,al_map_rgb(255,255,255), 0,500,0,"OBJECT         : no object");
	al_draw_text(font,al_map_rgb(255,255,255), 0,540,0,"FRAME RATE: 0 fps");

	al_flip_display();

}



void* core_function( void *ptr )
{

	//testbedGUI *gui;
	//gui = (testbedGUI*) ptr;

	// SET UP THE ALLEGRO DISPLAY for drawing the acquired pictures
	// ....................................................................
	disp_image = NULL;
	display = NULL;

	if(!al_init()) {
		fprintf(stderr, "failed to initialize allegro!\n");
	}

	al_init_image_addon();
	al_init_font_addon();
	al_init_ttf_addon();

	display = al_create_display(std_W, std_H + 100);
	if(!display) {
		fprintf(stderr, "failed to create display!\n");
	}


	al_set_new_bitmap_format(ALLEGRO_PIXEL_FORMAT_RGB_888);

	font = al_load_ttf_font("/usr/share/fonts/truetype/msttcorefonts/arial.ttf",35,0 );

	// Content to be shown
	Mat img_to_show;   // the image
	string rec_object; // the recognized object
	float fps;         // the frame rate (frames per second)
	Mat white_screen = 255 * Mat::ones(std_H,std_W,CV_8UC1);
	Mat black_screen =   0 * Mat::ones(std_H,std_W,CV_8UC1);
	// *******************************************************************




	enum app_states {
		IDLE, REC_CTA_IMG, REC_ATC_IMG, IMG_RECEIVED, MISSING_ATC_PKTS, ERR_CTA
	};


	int curState  = IDLE;
	int prevState = IDLE;


	uchar *packet;
	int packetLength;
	int pktType;

	actions reqActs;

	imgInfo curImgInfo;
	pktInfo curPktInfo;

	// prepare vectors containing the received bitstreams
	vector< vector<uchar> > kp_vectors;
	vector< vector<uchar> > ft_vectors;
	vector< int >           num_feats;

	// vectors for received encoded bitstreams
	vector<uchar> rec_JPEGbuff;
	vector<uchar> rec_kpts;
	vector<uchar> rec_feats;

	// data structures for decoding bitstreams
	Mat dec_imJPEG;



	// send the START COMMAND
	reqActs.atc = ATC_CTA;
	reqActs.cta = !ATC_CTA;
	reqActs.do_compression = entropy_coding;
	reqActs.jpeg_qf = jpeg_qf;
	reqActs.stop_program = false;

	dataTx->sendCMD_RADIO(src,START,&reqActs);


	bool end_loop = false;
	while(!end_loop){

		// Handling the "IDLE" state
		// -----------------------------------------------------------------------
		if(curState == IDLE){

			cout << endl << "Waiting..." << endl;
			// wait for a packet
			bool recPkt = false;
			while (recPkt == false){
				if( dataTx->receivePacketRADIO(src, &packet, &packetLength) == 0 ){
					pktType = dataTx->parseMessage(packet);
				}
				if( pktType==IMG_INFO_PKT || pktType==REQ_ACK_REC_IMG || pktType == NO_OBJ_PKT){
					recPkt = true;
				}

			}




			// if I received a IMG_INFO_PKT, read info and change state
			if( pktType == IMG_INFO_PKT ){

				cout << "INFO packet received." << endl;

				// Read the image information
				dataTx->getImgInfo(packet, curImgInfo);

				// Print some information about the image
				if(curImgInfo.atc_cta == true){
					cout << "Type: ATC" << endl;
					cout << "Algorithm: " << curImgInfo.descName << endl;
					cout << "Number of features: " << curImgInfo.nFeats << endl;
					cout << "Image size = " << curImgInfo.h << " x " << curImgInfo.w << endl;
					if(curImgInfo.compressed == true){
						cout << "Compressed stream" << endl;
					}
					else{
						cout << "Non-compressed stream" << endl;
					}
				}
				else{
					cout << "Type: CTA" << endl;
				}

				// Change state
				if ( curImgInfo.atc_cta == false ){ // CTA protocol
					curState = REC_CTA_IMG;
				}
				else{
					curState = REC_ATC_IMG;
				}

			}

			// if I received a REQ_ACK_REC_IMG, send a ACK request
			else if( pktType == REQ_ACK_REC_IMG ){
				curState = IMG_RECEIVED;
			}

			// if I received a no-obj packet, draw the black screen...
			else if( pktType == NO_OBJ_PKT ){
				draw_black_screen_allegro();
				frameCounter = 0; // ...reset the frame counter...
				timeFrame.clear();
				curState = IDLE;  // ...and remain in the IDLE state
			}
			prevState = IDLE;

		}


		// Handling the "REC_CTA_IMG" state
		// -----------------------------------------------------------------------
		else if(curState == REC_CTA_IMG){

			// Send the ACK packet
			dataTx->sendACK_RADIO(src,ACK_REC_INFO,curImgInfo.imageID);

			cout << "Receiving JPEG bitstream........" << endl;
			int err_ret = dataTx->receivePacketRADIO(src, &packet, &packetLength);


			if (err_ret == 0){
				pktType = dataTx->parseMessage(packet);

				cout << "Packet type: " << pktType << endl;

				// if pktType == REQ_ACK_REC_INFO, re-send the ack
				if ( pktType == REQ_ACK_REC_INFO ){
					dataTx->sendACK_RADIO(src,ACK_REC_INFO,curImgInfo.imageID);
				}
				// if the packet contains data, then read it
				else if ( pktType == CTA_IMG_PKT ){

					// read the packet info
					dataTx->getPacketInfo(packet,curPktInfo);
					if( curPktInfo.imageID == curImgInfo.imageID ){

						// fill the JPEG buffer with the packet content
						rec_JPEGbuff.clear();
						for(int i=1; i<packetLength; i++){
							rec_JPEGbuff.push_back((uchar)packet[i]);
						}

						curState = IMG_RECEIVED; // update the state
						cout << "ok" << endl;
					}
					else{
						cout << "WRONG IMG. ID!!!" << endl;
						curState = ERR_CTA; // set the error state
					}

				}
				else{
					curState = ERR_CTA; // set the error state
				}
			}
			else{
				curState = ERR_CTA;
			}

			prevState = REC_CTA_IMG;


		}


		// Handling the "REC_ATC_IMG" state
		// -----------------------------------------------------------------------
		else if(curState == REC_ATC_IMG){

			// Send the ACK packet
			dataTx->sendACK_RADIO(src,ACK_REC_INFO,curImgInfo.imageID);

			// Clear the vectors
			kp_vectors.clear();
			ft_vectors.clear();
			num_feats.clear();

			int countRecFeats = 0;
			bool errors = false;

			cout << "Receiving visual features.........." << endl;

			int err_ret;

			err_ret = dataTx->receivePacketRADIO(src, &packet, &packetLength);

			if(err_ret == 0){

				pktType = dataTx->parseMessage(packet);

				// NOT VERY SURE...
				/*
				if (ctrl != 0){
					do{
						ctrl = dataTx->receivePacketRADIO(src, &packet, &packetLength);
						pktType = dataTx->parseMessage(packet);
						if (ctrl == 0 && pktType==REQ_ACK_REC_INFO){
							dataTx->sendACK_RADIO(src,ACK_REC_INFO,curImgInfo.imageID);
						}
					}
					while(pktType == REQ_ACK_REC_INFO);
				}
				*/


				if ( pktType == REQ_ACK_REC_INFO ){ // if pktType == REQ_ACK_REC_INFO, re-send the ack
					dataTx->sendACK_RADIO(src,ACK_REC_INFO,curImgInfo.imageID);
				}

				else{ // else receive data

					do
					{ // loop until all packets are received, or some errors occur

						if( pktType == ATC_IMG_PKT ){

							dataTx->getPacketInfo(packet,curPktInfo);

							if( curPktInfo.imageID == curImgInfo.imageID ){

								// update the counter of received features
								countRecFeats += curPktInfo.nFeats;

								// Store the number of features contained in the current packet
								num_feats.push_back(curPktInfo.nFeats);

								// Read the keypoints
								int w_log2 = ceil(log2(curImgInfo.w));
								int h_log2 = ceil(log2(curImgInfo.h));
								int kp_streamLength = (w_log2 + h_log2 + 14)*curPktInfo.nFeats;
								kp_streamLength = ceil ( (float)kp_streamLength / 8.0 );
								rec_kpts.clear();
								for(int i=0; i<kp_streamLength; i++){
									rec_kpts.push_back(packet[i+2]);
								}
								kp_vectors.push_back(rec_kpts);

								// Read the features
								rec_feats.clear();
								for(int i=kp_streamLength; i<packetLength-2; i++){
									rec_feats.push_back(packet[i+2]);
								}
								ft_vectors.push_back(rec_feats);

								// Update the state
								curState = IMG_RECEIVED;
								cout << "ok" << endl;
							}
							else{ // error: imgID mismatch
								cout << "WRONG IMG. ID!!!" << endl;
								errors = true;
							}

						}
						else{
							cout << "WRONG PACKET TYPE!!!" << endl;
							errors = true; // wrong packet type
						}

						// if no errors, read the next packet
						if (countRecFeats < curImgInfo.nFeats && !errors){
							err_ret = dataTx->receivePacketRADIO(src, &packet, &packetLength);
							if (err_ret==0){
								pktType = dataTx->parseMessage(packet);
							}
							else{
								errors = true;
							}
						}

					}
					while( countRecFeats < curImgInfo.nFeats && !errors );

				}
			}
			else{
				curState = ERR_CTA;
			}

			if(errors){
				curState = ERR_CTA;
			}


			prevState = REC_ATC_IMG;

		}


		// Handling the "IMG_RECEIVED" state
		// -----------------------------------------------------------------------
		else if(curState == IMG_RECEIVED){


			// Set the new commands according to the options
			// selected on the gui
			reqActs.atc = ATC_CTA;
			reqActs.cta = !ATC_CTA;
			reqActs.do_compression = entropy_coding;
			reqActs.jpeg_qf = jpeg_qf;
			reqActs.stop_program = stop_acq;

			dataTx->sendACK_RADIO(src,ACK_REC_IMG,curImgInfo.imageID,&reqActs);
			end_loop = reqActs.stop_program;


			if( prevState != IDLE ){

				// Here: 1) show the keypoints (if ATC) or the image+kpts (if CTA)
				//       2) perform object recognition
				//       3) display results

				vector<KeyPoint> kpts_to_show; // will contain the keypoints to be shown
				vector<KeyPoint> kpts;         // will contain the keypoints (to perform obj recognition)
				Mat features;          		   // will contain the feature vectors


				if( curImgInfo.atc_cta == false ){

					// decode the JPEG stream
					dec_imJPEG = imdecode(rec_JPEGbuff,1);

					cout << "Image JPEG received and decoded successfully:" << endl;
					cout << "ImageID = " << curImgInfo.imageID << endl;
					cout << "Size = " << dec_imJPEG.rows << " x " << dec_imJPEG.cols << endl;

					// extract the features
					cvtColor(dec_imJPEG,dec_imJPEG,CV_BGR2GRAY); //(needed)

					featExtract->extractFeatures(dec_imJPEG,&kpts,&features);
					featExtract->cutFeatures(kpts,features,maxFeatures);

					cout << "Number of extracted features: " << kpts.size() << endl;

					kpts_to_show = kpts;

					// center the image and the keypoints (for visualization only), if needed
					int curH = dec_imJPEG.rows;
					int curW = dec_imJPEG.cols;

					if (curH<std_H || curW<std_W){

						img_to_show = black_screen.clone();
						int min_c = std_W/2 - round(curW/2.0);
						int min_r = std_H/2 - round(curH/2.0);
						Mat aux = img_to_show.rowRange(min_r,min_r+curH).colRange(min_c,min_c+curW);
						dec_imJPEG.copyTo(aux);

						for(unsigned int i=0; i<kpts.size(); i++){
							kpts_to_show[i].pt.x += min_c;
							kpts_to_show[i].pt.y += min_r;
						}
					}
					else{
						img_to_show = dec_imJPEG.clone();
					}

					// draw the keypoints on the image
					drawKeypoints(img_to_show,kpts_to_show,img_to_show,Scalar(255,0,0),DrawMatchesFlags::DRAW_RICH_KEYPOINTS);

				}

				else{

					//decode the keypoints and the features
					kpts.clear();

					vector<KeyPoint> cur_dec_kpts;

					int imW_pix = curImgInfo.w;
					int imH_pix = curImgInfo.h;

					for(unsigned int i=0; i<kp_vectors.size(); i++){
						decoder.decodeKeyPoints(kp_vectors[i], cur_dec_kpts,imW_pix,imH_pix);
						kpts.insert( kpts.end(), cur_dec_kpts.begin(), cur_dec_kpts.end() );
					}
					cout << "NUMBER OF DECODED KPTS: " << kpts.size() << endl;


					Mat dec_feats, cur_dec_feats;

					for(unsigned int i=0; i<ft_vectors.size(); i++){

						if(curImgInfo.compressed == true){
							decoder.decodeBinaryDescriptors(curImgInfo.descName, ft_vectors[i], cur_dec_feats, num_feats[i]);
						}
						else{
							decoder.dummy_decodeBinaryDescriptors(curImgInfo.descName,ft_vectors[i], cur_dec_feats);
						}

						if(i==0){
							dec_feats = cur_dec_feats.clone();
						}
						else{
							vconcat(dec_feats, cur_dec_feats, dec_feats);
						}

					}


					// center the image and the keypoints, if needed
					kpts_to_show = kpts;

					if (imH_pix<std_H || imW_pix<std_W){
						for(unsigned int i=0; i<kpts.size(); i++){
							kpts_to_show[i].pt.x += std_W/2 - round(imW_pix/2.0);
							kpts_to_show[i].pt.y += std_H/2 - round(imH_pix/2.0);
						}
					}

					// prepare the image to be displayed (white img + keypoints)
					img_to_show = white_screen.clone();
					drawKeypoints(img_to_show,kpts_to_show,img_to_show,Scalar(255,0,0),DrawMatchesFlags::DRAW_RICH_KEYPOINTS);

					Scalar sf = sum(dec_feats);
					double sk = 0;
					for(unsigned int i=0; i<kpts.size();i++){
						sk += kpts[i].pt.x + kpts[i].pt.y + kpts[i].size;
					}

					cout << "CONTROL VALUES: " << sf[0] << " , " << sk << endl;

					features = dec_feats.clone();

					cout << endl << "Visual features received and decoded successfully" << endl;

				}



				// Perform object recognition
				// -----------------------------------------------------------------------------------------------
				vector< vector<float> > distances;
				vector< unsigned int > ranking;

				cout << "OBJECT RECOGNITION....." << endl;
				ranking = objRec->rankedQueryDB(kpts, // keypoints of the query image
								  features,           // features of the query image
								  distances,
								  do_bin_ratio_test,         // enable/disable ratio-test for binary descriptors
								  124/2,       // distance threshold for nearest neighbour test
								  DEFAULT_NNDR_RATIO,        // ratio-test threshold
								  1,                 // enable/disable ransac
								  DEFAULT_RANSAC_MIN_MATCHES,// minimum number of matches
								  DEFAULT_RANSAC_THRESHOLD );// maximum allowed reprojection error

				cout << "OK" << endl;

				// sort the ranking list
				vector<size_t> sorted_idxs;
				sorted_idxs.clear();
				sort_like_matlab(ranking,ranking,sorted_idxs,1);

				// group the object of the same class
				vector<int> classScore (n_objects);
				for(unsigned int i=0; i<ranking.size(); i++){
					classScore[db_class[sorted_idxs[i]]] += ranking[i];
				}

				// obtain the final ranking
				sorted_idxs.clear();
				sort_like_matlab( classScore, classScore, sorted_idxs, 1);

				if( classScore[0]>10 ){
					rec_object = db_obj[sorted_idxs[0]];
					cout << "OBJECT: " << db_obj[sorted_idxs[0]] << endl << endl;
					for(unsigned int i=0; i<classScore.size(); i++){
						cout << "CLASS " << sorted_idxs[i] << " , rank = " << classScore[i] << endl;
					}
				}
				else{
					rec_object = "n.r.";
				}


				// Compute the frame rate
				fps = -1;

				frameCounter++;
				if(frameCounter == 1){
					time_start = (double)getTickCount();
				}
				if(frameCounter > 1){
					double time_now = (double)getTickCount();
					double curTimeFrame = (time_now - time_start)/getTickFrequency();
					time_start = time_now;
					timeFrame.push_back(curTimeFrame);

					if(timeFrame.size()>maxFramesFPS){
						timeFrame.erase (timeFrame.begin());
					}

					// average
					double meanTimeFrame = 0;
					for(unsigned int i=0; i<timeFrame.size(); i++){
						meanTimeFrame += timeFrame[i];
					}
					meanTimeFrame = meanTimeFrame / double(timeFrame.size());

					fps = (float) (1.0 / meanTimeFrame);
				}


				// Draw the image on the display
				draw_image_allegro(img_to_show,rec_object,fps);

			}



			prevState = IMG_RECEIVED;
			curState  = IDLE;

		}

		// Handling the "MISSING_ATC_PKTS" state
		// -----------------------------------------------------------------------
		else if(curState == MISSING_ATC_PKTS){

			prevState = MISSING_ATC_PKTS;
			curState = IDLE;

		}

		// Handling the "ERR_CTA" state
		// -----------------------------------------------------------------------
		else if(curState == ERR_CTA){

			cout << "Error receiving packets!" << endl;
			dataTx->sendACK_RADIO(src,ACK_REC_IMG,curImgInfo.imageID,&reqActs);
			prevState = ERR_CTA;
			curState = IDLE;

		}


	}

	// send some extra ACK
	dataTx->sendACK_RADIO(src,ACK_REC_IMG,curImgInfo.imageID,&reqActs);
	dataTx->sendACK_RADIO(src,ACK_REC_IMG,curImgInfo.imageID,&reqActs);
	dataTx->sendACK_RADIO(src,ACK_REC_IMG,curImgInfo.imageID,&reqActs);


	al_destroy_display(display);
	int ret = 1;
	pthread_exit(&ret);

}


testbedGUI::testbedGUI( wxWindow* parent )
:
ATC_CTA_testbed( parent )
{

}

void testbedGUI::onMainStart(  wxActivateEvent& event )
{

	if(!app_initialized){

		app_initialized = true;

		// initialize the data transmission
		dataTx = new DataTransmission();
		src = dataTx->openSerialRADIO(radioDevice,115200,0);

		// initialize the extractor
		featExtract = new VisualFeatureExtraction;

		BRISK_detParams detPrms(brisk_threshold,4);
		featExtract->setDetector(detectorName, &detPrms); // set the detector

		vector<int> pairs;

		int aux_pairs[BRISK_LENGTH_BITS];
		ifstream fileRank;
		if ( BRISK_LENGTH_BITS == 512 ){
			fileRank.open("../testbed_framework/thirdparty/coder/brisk/ranking_original_optimized512.bin",ios::in|ios::binary);
		}
		else if ( BRISK_LENGTH_BITS == 256 ){
			fileRank.open("../testbed_framework/thirdparty/coder/brisk/ranking_original_optimized256.bin",ios::in|ios::binary);
		}
		fileRank.read((char*)aux_pairs,sizeof(int)*BRISK_LENGTH_BITS);
		fileRank.close();
		for(int i=0; i<BRISK_LENGTH_BITS; i++){
			pairs.push_back(aux_pairs[i]);
		}

		BRISK_descParams descPrms(pairs);
		featExtract->setDescriptor(descriptorName, &descPrms);    // set the descriptor


		// Read the database images
		if( getdir( imgDatabasePath , db_obj) != 0){
			cout << "Error in reading image database path!";
		}
		sort( db_obj.begin(), db_obj.end() );

		n_objects = db_obj.size();

		vector<string> db_files;
		vector<string> obj_files;


		for( int i=0; i<n_objects; i++ ){
			obj_files.clear();

			if( getdir( imgDatabasePath + db_obj[i] + "/", obj_files )!=0 ){
				cout << "Error reading object files" << endl;
			}

			sort( obj_files.begin(), obj_files.end() );

			for(unsigned int j=0; j<obj_files.size(); j++){
				db_files.push_back(imgDatabasePath + db_obj[i] + "/" + obj_files[j]);
				db_class.push_back(i); // the class id for the current image
			}

		}


		// Initialize the recognition pipeline
		objRec = new objRecognition(*featExtract,bin_desc,n_objects);


		// Keypoint detection and descriptor extraction for each image in the database
		for(int n=0; n<(int)db_files.size(); n++){
			cout << "Adding object " << n << ": ";
			cout << db_files[n] << endl;
			objRec->dCreateAddToDB(db_files[n]);
		}

		cout << "BRISK LENGTH (bits) = " << BRISK_LENGTH_BITS << endl;
		cout << "BRISK LENGTH (bytes) = " << BRISK_LENGTH_BYTES << endl;

	}

}


void testbedGUI::updateFPS(float fps){

	stringstream ss (stringstream::in | stringstream::out);
    ss << fps;
    ss.~basic_stringstream();

}

void testbedGUI::updateOBJ(std::string obj){

}


void testbedGUI::onJPEGqf( wxCommandEvent& event )
{

	double val;

	if (txt_qf->GetValue().ToDouble(&val)){
		jpeg_qf = val;
	}
	else{
		jpeg_qf = 60;
		cout << "error" << endl;
	}



}


void testbedGUI::onCTA_on_off( wxCommandEvent& event )
{
	bool a = event.GetSelection();
	ck_ATC->SetValue((int)!a);
	ATC_CTA = !a;


	frameCounter = 0; // ...reset the frame counter...
	timeFrame.clear();

}


void testbedGUI::onATC_on_off( wxCommandEvent& event )
{
	bool a = event.GetSelection();
	ck_CTA->SetValue((int)!a);
	ATC_CTA = a;

	frameCounter = 0; // ...reset the frame counter...
	timeFrame.clear();

}

void testbedGUI::onEntropyCoding( wxCommandEvent& event )
{
	entropy_coding = (bool)event.GetSelection();
}

void testbedGUI::onStartStop( wxCommandEvent& event )
{

	pthread_t core_thread;

	if (stop_acq == true){
		bt_startstop->SetLabel(wxString::FromAscii("STOP"));
		stop_acq = false;
		pthread_create( &core_thread, NULL, core_function, (void*)this);
	}
	else{

		stop_acq = true;
		cout << "waiting thread" << endl;
		pthread_join(core_thread,NULL);

		bt_startstop->SetLabel(wxString::FromAscii("START"));
		cout << "thread completed!" << endl;

	}

}
